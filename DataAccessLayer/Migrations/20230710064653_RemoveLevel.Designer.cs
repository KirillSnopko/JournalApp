// <auto-generated />
using System;
using DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(JournalContext))]
    [Migration("20230710064653_RemoveLevel")]
    partial class RemoveLevel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DataAccessLayer.Entity.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfFinish")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfStart")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("GradeLevelId")
                        .HasColumnType("int");

                    b.Property<int>("LessonDuration")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("StudentProfileId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GradeLevelId");

                    b.HasIndex("StudentProfileId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.GradeLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("GradeLevel");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfPayment")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("GradeHome")
                        .HasColumnType("int");

                    b.Property<int>("GradeLesson")
                        .HasColumnType("int");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPrepared")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTaskGiven")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LessonDuration")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<string>("Task")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.StudentProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("ParentMobile")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ParentName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("StudentMobile")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("StudentProfile");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("GradeLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("GradeLevelId");

                    b.HasIndex("LessonId");

                    b.ToTable("Topic");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Course", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.GradeLevel", "GradeLevel")
                        .WithMany()
                        .HasForeignKey("GradeLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entity.StudentProfile", "StudentProfile")
                        .WithMany("Courses")
                        .HasForeignKey("StudentProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GradeLevel");

                    b.Navigation("StudentProfile");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.GradeLevel", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.Subject", "Subject")
                        .WithMany("GradeLevels")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Lesson", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.StudentProfile", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.Student", "Student")
                        .WithOne("StudentProfile")
                        .HasForeignKey("DataAccessLayer.Entity.StudentProfile", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Topic", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.GradeLevel", "GradeLevel")
                        .WithMany("Topics")
                        .HasForeignKey("GradeLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entity.Lesson", null)
                        .WithMany("Topics")
                        .HasForeignKey("LessonId");

                    b.Navigation("GradeLevel");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Course", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.GradeLevel", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Lesson", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Student", b =>
                {
                    b.Navigation("StudentProfile")
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entity.StudentProfile", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Subject", b =>
                {
                    b.Navigation("GradeLevels");
                });
#pragma warning restore 612, 618
        }
    }
}
